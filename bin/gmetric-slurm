#!/usr/bin/env ruby
#
# Copyright 2015 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


require 'rubygems'
require 'ostruct'
require 'logger'
require 'getoptlong' 
require 'socket'
require 'json'

class Hash
  def self.autonew(*args)
    new(*args){|hsh, key| hsh[key] = Hash.new(&hsh.default_proc) }
  end
end

module System

  def self.command?(command)
    `which #{command}`
    return true if $?.success?
    return false
  end

  def self.exec(command)
    command = command.gsub(/\n/," ").strip.gsub(/\s+/,' ')
    command + ' 2>&1'
    $logger.debug "Exec [#{command}]"
    # Execute command as subprocess and return the exit code
    pipe = IO.popen(command)
    # Get the process ID from the child
    pid = pipe.pid
    # Read the output from the stream
    output = pipe.read
    # Wait for successful return and pass back the code to the caller
    Process.wait(pid)
    state=$?
    $logger.debug "Returned with #{state}"
    if state == 0
      return output.gsub(/^$\n/, '')
    else
      $logger.warn "Failed to execute [#{command}]"
      return nil
    end
  end

end

module Slurm

  module Jobs

    def self.states
      raise('Command [squeue] not in path!') unless System.command? 'squeue' 
      command = %q{squeue -h -o '%A,%T'}
      output = System.exec(command)
      unless output.nil?
        states = {
          pending: 0, 
          running: 0,
          suspended: 0, 
          cancelled: 0, 
          completing: 0, 
          completed: 0, 
          configuring: 0, 
          failed: 0, 
          timeout: 0, 
          preempted: 0, 
          node_fail: 0,
          special_exit: 0
        }
        output.split("\n").each do |line|
          job_id, state =  line.split(',')
          states[state.downcase.to_sym] += 1
        end
        return states
      end
      return nil
    end 

  end

  module Nodes

    def self.states
      raise('Command [sinfo] not in path!') unless System.command? 'sinfo' 
      command = %q{sinfo -h -o '%n,%T'}
      output = System.exec(command)
      unless output.nil?
        states = { alloc: 0, comp: 0, down: 0, drain: 0, idle: 0 }
        output.split("\n").each do |line|
          node, state =  line.split(',')
          case state
          when /^alloc/,/^mix/
            states[:alloc] += 1
          when /^comp/
            states[:comp] += 1
          when /^down/
            states[:down] += 1
          when /^drain/
            states[:drain] += 1
          when /^idle/
            states[:idle] += 1
          else
            $logger.debug %Q[Node state "#{state}" is not supported]
          end
        end
        return states
      end
      return nil
    end

  end

end

class Ganglia

  def initialize 
    raise("Command [gmetric] not in path!") unless System.command? 'gmetric'
  end

  def gmetric
    job_states
    node_states
  end

  private

  # Wrap System::exec to support a dry-run option for all gmetric commands
  def exec(command)
    command = %Q[gmetric --group=slurm #{command}]
    if $options.dry_run
      $logger.debug "Exec [#{command}]"
    else
      System::exec(command)
    end
  end

  def job_states
    states = Slurm::Jobs::states
    unless states.nil?
      states.each_pair do |state,count|
        exec %Q[--type=uint32 --name=jobs_#{state} --value=#{count}]
      end
    end
  end

  def node_states
    states = Slurm::Nodes::states
    unless states.nil?
      states.each_pair do |state,count|
        exec %Q[--type=uint32 --name=nodes_#{state} --value=#{count}]
      end
    end
  end

end




exec_name = File.split(__FILE__)[-1]
HELP = <<EOF
Send Slurm metrics to Ganglia

  #{exec_name} [-l path] [-L level] [-p path] [-i interval]
               [--daemonize] [--dry-run]

Options
-------

  --daemonize, -D 
    Background daemon process.
  --debug, -d
    Show stacktraces in case of errors.
  --dry-run
    Enable debug mode, and do not send metrics to Ganglia. 
  --interval, -i SECONDS
    Time interval to send data to Ganglia (default = 20).
  --help, -h
    Show this help information.
  --log-file, -l PATH:
    Path to the log file when executed as daemon (defaults
    to /var/log/#{exec_name}.log).
  --log-level, -L debug|info|warn|fatal
    Verbosity of the logging output.
  --pid-file, -p PATH:
    Path to a file storing the process ID when executed as 
    daemon (default to /var/run/#{exec_name}.pid)
  --version, v
    Print program version.
EOF

begin

  # Unlikely to be used by a daemon 
  #stdin = $stdin.tty? ? String.new : $stdin.read

  $DEBUG = false

  $options = OpenStruct.new
  $options.debug = false
  $options.dry_run = false
  $options.interval = 300
  $options.daemonize = false
  $options.pid_file = String.new
  $options.log_file = String.new
  
  $options.error_counters = false
  $options.interval = 20

  $logger = Logger.new(STDOUT)
  # Adjust the time format used for the logger
  $logger.datetime_format = "%Y-%m-%dT%H:%M:%S"
  $logger.formatter = proc do |severity, datetime, progname, message|
    "[#{datetime.strftime($logger.datetime_format)}] #{severity} -- #{message}\n"
  end

  $logger.level = Logger::INFO

  GetoptLong.new(
    ['--daemonize','-D',GetoptLong::NO_ARGUMENT],
    ['--debug','-d',GetoptLong::NO_ARGUMENT],
    ['--dry-run',GetoptLong::NO_ARGUMENT],
    ['--help','-h',GetoptLong::NO_ARGUMENT],
    ['--interval','-i',GetoptLong::REQUIRED_ARGUMENT],
    ['--log-file','-l',GetoptLong::REQUIRED_ARGUMENT],
    ['--log-level','-L',GetoptLong::REQUIRED_ARGUMENT],
    ['--pid-file','-p',GetoptLong::REQUIRED_ARGUMENT],
    ['--version','-v',GetoptLong::NO_ARGUMENT]
  ).each do |opt,arg|
    case opt
    when '--daemonize'
      $options.daemonize = true
    when '--debug'
      $options.debug = true
      $logger.level = Logger::DEBUG
    when '--dry-run'
      $options.dry_run = true
      $options.debug = true
      $logger.level = Logger::DEBUG
    when '--interval'
      $options.interval = arg.to_i
    when '--pid-file'
      $options.pid_file = arg
    when '--log-file'
      $options.log_file = arg
    when '--log-level'
      $logger.level = case arg
         when 'warn'
           Logger::WARN
         when 'debug'
           Logger::DEBUG
         when 'fatal'
           Logger::FATAL
         else
           Logger::INFO
         end
      $options.debug = true if arg == 'debug'
    when '--version'
      $stdout.puts 0.1
      exit 0
    when '--help'
      $stdout.puts HELP
      exit 0
    end
  end

  shutdown = false

  Signal.trap('TERM') do
    Thread.new { $logger.info "Service terminated!" }
    exit 0
  end
  Signal.trap('INT') do
    shutdown = true
    Thread.new { $logger.info "Stopping service in #{$options.interval} seconds..." }
  end
 
  if $options.daemonize
    if RUBY_VERSION < '1.9'
      exit if fork
      Process.setsid
      exit if fork
      Dir.chdir '/'
    else
      Process.daemon
    end
  end

  unless $options.pid_file.empty?
    # Write the process ID to a file
    File.open($options.pid_file,'w') { |file| file.write "#{$$}\n"}
    $logger.info "Process ID stored to #{$options.pid_file}"
  end

  unless $options.log_file.empty?
    # Bind output to a log file
    $stdin.reopen '/dev/null'
    $stdout.reopen($options.log_file,'w')
    $stdout.sync = true
    $stderr.reopen($stdout)
    $logger.info "Writing log into #{$options.log_file}"
  end

  ganglia = Ganglia.new

  while(true)
    break if shutdown
    ganglia.gmetric
    sleep $options.interval - 1
  end
  $logger.info "Service stopped!"

rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts " use -h for detailed instructions"
  if $options.debug
    $stderr.puts "Catched: #{exc.class}"
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-d\''
  end
  exit 1
end

exit 0
