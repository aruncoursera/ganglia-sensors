#!/usr/bin/env ruby
#
# Copyright 2015 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


require 'rubygems'
require 'ostruct'
require 'logger'
require 'getoptlong'
require 'socket'
require 'json'

class Hash
  def self.autonew(*args)
    new(*args){|hsh, key| hsh[key] = Hash.new(&hsh.default_proc) }
  end
end

module System

  def self.command?(command)
    `which #{command}`
    return true if $?.success?
    return false
  end

  def self.exec(command)
    command = command.gsub(/\n/," ").strip.gsub(/\s+/,' ')
    command += ' 2>&1'
    $logger.debug "Exec [#{command}]"
    # Execute command as subprocess and return the exit code
    pipe = IO.popen(command)
    # Get the process ID from the child
    pid = pipe.pid
    # Read the output from the stream
    output = pipe.read
    # Wait for successful return and pass back the code to the caller
    Process.wait(pid)
    state=$?
    $logger.debug "Returned with #{state}"
    if state == 0
      return output.gsub(/^$\n/, '')
    else
      $logger.warn "Failed to execute [#{command}]"
      return nil
    end
  end

end

module Slurm

  def self.sdiag
    # query information from slurm
    output = System.exec('sdiag')
    return nil if output.nil?
    metrics = Hash.new
    prefix = 'scheduler'
    # iterate of the data
    lines = output.split("\n")
    metrics["#{prefix}_threads"] = lines[4].split(':')[-1].to_i
    metrics["#{prefix}_queue_size"] = lines[5].split(':')[-1].to_i
    metrics["#{prefix}_last_cycle"] = lines[12].split(':')[-1].to_i
    metrics["#{prefix}_mean_cycle"] = lines[15].split(':')[-1].to_i
    metrics["#{prefix}_cycle_per_minute"] = lines[17].split(':')[-1].to_i
    metrics["#{prefix}_backfill_last_cycle"] = lines[24].split(':')[-1].to_i
    metrics["#{prefix}_backfill_mean_cycle"] = lines[26].split(':')[-1].to_i
    metrics["#{prefix}_backfill_depth_mean"] = lines[29].split(':')[-1].to_i
    return metrics
  end

  module Jobs

    def self.states
      raise('Command [squeue] not in path!') unless System.command? 'squeue'
      command = %q{squeue -h -o '%A,%T'}
      output = System.exec(command)
      unless output.nil?
        states = {
          pending: 0,
          running: 0,
          suspended: 0,
          cancelled: 0,
          completing: 0,
          completed: 0,
          configuring: 0,
          failed: 0,
          timeout: 0,
          preempted: 0,
          node_fail: 0,
          special_exit: 0
        }
        output.split("\n").each do |line|
          _job_id, state =  line.split(',')
          states[state.downcase.to_sym] += 1
        end
        return states
      end
      return nil
    end

  end

  module Nodes

    module_function

    def states(pattern)

      raise('Command [sinfo] not in path!') unless System.command? 'sinfo'

      output = System.exec("sinfo -h -o '%n,%T' | sort | uniq")

      unless output.nil?

        states = {
          alloc: 0,
          comp: 0,
          down: 0,
          drain: 0,
          fail: 0,
          idle: 0,
          maint: 0,
          resv: 0
        }

        output.split("\n").each do |line|

          node, state =  line.split(',')

          unless pattern.nil?
            next unless node =~ /^#{pattern}/
          end

          case state
          when /^alloc/,/^mix/
            states[:alloc] += 1
          when /^comp/
            states[:comp] += 1
          when /^down/
            states[:down] += 1
          when /^drain/
            states[:drain] += 1
          when /^fail/,/^err/
            states[:fail] += 1
          when /^idle/
            states[:idle] += 1
          when /^maint/
            states[:maint] += 1
          when /^resv/
            states[:resv] += 1
          else
            $logger.debug %Q[Node state "#{state}" is not supported]
          end
        end

        return states

      end

      return nil

    end

    def utilization(pattern)

      # List of all nodes an their configuration in Slurm
      nodes = Hash.new

      # Query the cluster controller
      command = %q{scontrol show node --all --details --oneliner}
      System.exec(command).split("\n").each do |line|

        #
        # Use the node name as hash key
        #
        name = String.new

        #
        # Iterate over all node "key=value" elements
        #
        line.split(' ').each do |elem|

          key,value = elem.split('=')
          key = key.downcase
          case key
          when 'nodename'
            #
            # Set the node name, which is always the first element per line
            #
            name = value
            nodes[name] = Hash.new unless nodes.has_key? name
          else
            #
            # All other elements are key -> value anchored to the node name
            #
            nodes[name][key] = value
          end
        end

      end

      metrics = {
        'nodes' => 0,
        'nodes_alloc' => 0,
        'nodes_idle' => 0,
        'nodes_maint' => 0,
        'cores' => 0,
        'cores_avail' => 0,
        'cpus_alloc' => 0,
        'cpus_load' => 0
      }

      nodes.each do |node,config|

        unless pattern.nil?
          next unless node =~ /^#{pattern}/
        end

        metrics['nodes'] += 1

        cores = config['sockets'].to_i * config['corespersocket'].to_i

        metrics['cores'] += cores

        # Normalize the number of CPUs/threads to the number of cores
        metrics['cpus_alloc'] += config['cpualloc'].to_i / config['threadspercore'].to_i
        metrics['cpus_load'] += config['cpuload'].to_i

        #
        # The number of available cores includes only nodes
        # not in maintenance, e.g. drain or down
        #
        case config['state'].downcase
        when /^alloc/, /^mix/
          metrics['nodes_alloc'] += 1
          metrics['cores_avail'] += cores
        when /^idle/
          metrics['nodes_idle'] += 1
          metrics['cores_avail'] += cores
        else
          metrics['nodes_maint'] += 1
        end

      end

      return metrics

    end

  end

end

class Ganglia

  def initialize(node_patterns = [nil])
    raise("Command [gmetric] not in path!") unless System.command? 'gmetric'
    @prefix = 'slurm'
    @node_patterns = node_patterns
  end

  def metrics
    scheduler
    jobs
    states
    utilization
  end

  private

  # Wrap System::exec to support a dry-run option for all gmetric commands
  def gmetric(name, value, type = 'uint32')
    command = %Q[
      gmetric
        --group=slurm
        --type=#{type}
        --tmax=#{$options.interval * 2}
        --dmax=#{$options.interval * 2}
        --name=#{name}
        --value=#{value}
    ]
    if $options.dry_run
      $logger.debug "Exec [#{command.gsub(/\n/," ").strip.gsub(/\s+/,' ')}]"
    else
      System::exec(command)
    end
  end

  def scheduler
    metrics = Slurm::sdiag
    return if metrics.nil?
    metrics.each_pair { |m,v| gmetric m, v }
  end

  def jobs
    metrics = Slurm::Jobs::states
    return if metrics.nil?
    metrics.each_pair { |m,v| gmetric "jobs_#{m}",v }
  end

  def states
    @node_patterns.each do |pattern|
      metrics = Slurm::Nodes::states(pattern)
      next if metrics.nil?
      pattern = "#{pattern}_" unless pattern.nil?
      metrics.each_pair { |m,v| gmetric "nodes_#{pattern}#{m}", v } 
    end
  end

  def utilization
    @node_patterns.each do |pattern|
      puts pattern
      metrics = Slurm::Nodes::utilization(pattern)
      next if metrics.nil?
      pattern = "#{pattern}_" unless pattern.nil?
      metrics.each_pair { |m,v| gmetric "nodes_#{pattern}#{m}",v }
    end
  end

end

exec_name = File.split(__FILE__)[-1]
HELP = <<EOF
Send Slurm metrics to Ganglia

  #{exec_name} [-l path] [-L level] [-p path] [-i interval]
               [--daemonize] [--dry-run]

Options
-------

  --daemonize, -D
    Background daemon process.
  --debug, -d
    Show stacktraces in case of errors.
  --dry-run
    Enable debug mode, and do not send metrics to Ganglia.
  --interval, -i SECONDS
    Time interval to send data to Ganglia (default = 20).
  --help, -h
    Show this help information.
  --log-file, -l PATH:
    Path to the log file when executed as daemon (defaults
    to /var/log/#{exec_name}.log).
  --log-level, -L debug|info|warn|fatal
    Verbosity of the logging output.
  --node-patterns, -n pattern[,pattern[,...]]
    Seperated metrics for groups of nodes.
  --pid-file, -p PATH:
    Path to a file storing the process ID when executed as
    daemon (default to /var/run/#{exec_name}.pid)
  --version, v
    Print program version.
EOF

begin

  # Unlikely to be used by a daemon
  #stdin = $stdin.tty? ? String.new : $stdin.read

  $DEBUG = false

  $options = OpenStruct.new
  $options.debug = false
  $options.dry_run = false
  $options.interval = 20
  $options.daemonize = false
  $options.log_file = String.new
  $options.node_patterns = nil
  $options.pid_file = String.new
  $options.error_counters = false

  $logger = Logger.new(STDOUT)
  # Adjust the time format used for the logger
  $logger.datetime_format = "%Y-%m-%dT%H:%M:%S"
  $logger.formatter = proc do |severity, datetime, progname, message|
    "[#{datetime.strftime($logger.datetime_format)}] #{severity} -- #{message}\n"
  end

  $logger.level = Logger::INFO

  GetoptLong.new(
    ['--daemonize','-D',GetoptLong::NO_ARGUMENT],
    ['--debug','-d',GetoptLong::NO_ARGUMENT],
    ['--dry-run',GetoptLong::NO_ARGUMENT],
    ['--help','-h',GetoptLong::NO_ARGUMENT],
    ['--interval','-i',GetoptLong::REQUIRED_ARGUMENT],
    ['--log-file','-l',GetoptLong::REQUIRED_ARGUMENT],
    ['--log-level','-L',GetoptLong::REQUIRED_ARGUMENT],
    ['--node-patterns','-n',GetoptLong::REQUIRED_ARGUMENT],
    ['--pid-file','-p',GetoptLong::REQUIRED_ARGUMENT],
    ['--version','-v',GetoptLong::NO_ARGUMENT]
  ).each do |opt,arg|
    case opt
    when '--daemonize'
      $options.daemonize = true
    when '--debug'
      $options.debug = true
      $logger.level = Logger::DEBUG
    when '--dry-run'
      $options.dry_run = true
      $options.debug = true
      $logger.level = Logger::DEBUG
    when '--interval'
      $options.interval = arg.to_i
    when '--pid-file'
      $options.pid_file = arg
    when '--log-file'
      $options.log_file = arg
    when '--log-level'
      $logger.level = case arg
         when 'warn'
           Logger::WARN
         when 'debug'
           Logger::DEBUG
         when 'fatal'
           Logger::FATAL
         else
           Logger::INFO
         end
      $options.debug = true if arg == 'debug'
    when '--node-patterns'
      $options.node_patterns = arg.split(',')
    when '--version'
      $stdout.puts '2.0'
      exit 0
    when '--help'
      $stdout.puts HELP
      exit 0
    end
  end

  shutdown = false

  Signal.trap('TERM') do
    Thread.new { $logger.info "Service terminated!" }
    exit 0
  end
  Signal.trap('INT') do
    shutdown = true
    Thread.new { $logger.info "Stopping service in #{$options.interval} seconds..." }
  end

  if $options.daemonize
    if RUBY_VERSION < '1.9'
      exit if fork
      Process.setsid
      exit if fork
      Dir.chdir '/'
    else
      Process.daemon
    end
  end

  unless $options.pid_file.empty?
    # Write the process ID to a file
    File.open($options.pid_file,'w') { |file| file.write "#{$$}\n"}
    $logger.info "Process ID stored to #{$options.pid_file}"
  end

  unless $options.log_file.empty?
    # Bind output to a log file
    $stdin.reopen '/dev/null'
    $stdout.reopen($options.log_file,'w')
    $stdout.sync = true
    $stderr.reopen($stdout)
    $logger.info "Writing log into #{$options.log_file}"
  end

  ganglia = if $options.node_patterns.nil? 
              Ganglia.new
            else
              Ganglia.new($options.node_patterns)
            end

  while(true)
    break if shutdown
    ganglia.metrics
    sleep $options.interval - 1
  end
  $logger.info "Service stopped!"

rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts " use -h for detailed instructions"
  if $options.debug
    $stderr.puts "Catched: #{exc.class}"
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-d\''
  end
  exit 1
end

exit 0
